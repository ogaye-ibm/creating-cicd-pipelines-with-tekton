apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
    name: simple-hosted-pipeline
spec:
    params:
      - name: repository
        description: The git repo
      - name: branch
        description: the branch for the git repo
        default: master
      - name: revision
        description: the git revision/commit for the git repo (default to '' means branch)
        default: ''
      - name: region
        default: ''
      - name: cf-org
      - name: cf-space
      - name: cf-app
      - name: pipeline-debug
        default: '0'
      - name: ibmcloud-api
        default: 'https://cloud.ibm.com'
      - name: pr-url
        description: PR url
      - name: apikey
      - name: commit-timestamp
        description: commit timestamp
      - name: scm-type
        description: 'source code type used (github, github-ent, gitlab)'
      - name: project-id
        description: project id
        default: ''
    resourcetemplates:
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: simple-hosted-pipeline-$(uid)-pvc
        spec:
          resources:
            requests:
              storage: 5Gi
          volumeMode: Filesystem
          accessModes:
            - ReadWriteOnce
      - apiVersion: tekton.dev/v1beta1
        kind: PipelineRun
        metadata:
          name: simple-hosted-pipeline-$(uid)
        spec:
          pipelineRef:
            name: simple-hosted-pipeline
          params:
            - name: repository
              value: $(params.repository)
            - name: branch
              value: $(params.branch)
            - name: revision
              value: $(params.revision)
            - name: region
              value: $(params.region)
            - name: cf-org
              value: $(params.cf-org)
            - name: cf-space
              value: $(params.cf-space)
            - name: cf-app
              value: $(params.cf-app)
            - name: pipeline-debug
              value: $(params.pipeline-debug)
            - name: ibmcloud-api
              value: $(params.ibmcloud-api)
            - name: apikey
              value: $(params.apikey)
            - name: pr-url
              value: $(params.pr-url)
            - name: commit-timestamp
              value: $(params.commit-timestamp)
            - name: scm-type
              value: $(params.scm-type)
            - name: project-id
              value: $(params.project-id)
          workspaces:
            - name: pipeline-ws
              persistentVolumeClaim:
                claimName: simple-hosted-pipeline-$(uid)-pvc
      - apiVersion: tekton.dev/v1beta1
        kind: TriggerBinding
        metadata:
          name: manual-run
        spec:
          params: null
      - apiVersion: tekton.dev/v1beta1
        kind: EventListener
        metadata:
          name: manual-run
        spec:
          triggers:
            - binding:
                name: manual-run
              template:
                name: simple-hosted-pipeline
      - apiVersion: tekton.dev/v1beta1
        kind: TriggerBinding
        metadata:
          name: github-commit
        spec:
          params:
            - name: repository
              value: $(event.repository.url)
            - name: branch
              value: $(event.ref)
            - name: revision
              value: $(event.head_commit.id)
      - apiVersion: tekton.dev/v1beta1
        kind: EventListener
        metadata:
          name: github-commit
        spec:
          triggers:
            - binding:
                name: github-commit
              template:
                name: simple-hosted-pipeline
      - apiVersion: tekton.dev/v1beta1
        kind: TriggerBinding
        metadata:
          name: grit-or-gitlab-commit
        spec:
          params:
            - name: repository
              value: $(event.repository.git_http_url)
            - name: branch
              value: $(event.ref)
            - name: revision
              value: $(event.checkout_sha)
      - apiVersion: tekton.dev/v1beta1
        kind: EventListener
        metadata:
          name: grit-or-gitlab-commit
        spec:
          triggers:
            - binding:
                name: grit-or-gitlab-commit
              template:
                name: simple-hosted-pipeline
      - apiVersion: tekton.dev/v1beta1
        kind: TriggerBinding
        metadata:
          name: bitbucket-commit
        spec:
          params:
            - name: repository
              value: $(event.repository.links.html.href)
            - name: revision
              value: '$(event.push.changes[0].new.target.hash)'
            - name: branch
              value: '$(event.push.changes[0].new.name)'
      - apiVersion: tekton.dev/v1beta1
        kind: EventListener
        metadata:
          name: bitbucket-commit
        spec:
          triggers:
            - binding:
                name: bitbucket-commit
              template:
                name: simple-hosted-pipeline
      - apiVersion: tekton.dev/v1beta1
        kind: Pipeline
        metadata:
          name: simple-hosted-pipeline
        spec:
          params:
            - name: repository
              description: >-
                the git repo containing source code. If empty, the repository url will
                be found from toolchain
              default: ''
            - name: branch
              description: the branch for the git repo
              default: master
            - name: revision
              description: the git revision/commit for the git repo
            - name: region
              description: >-
                Name of the region to deploy the CF app to. Default to the toolchain
                region
              default: ''
            - name: cf-org
              description: Name of organization to deploy the CF app to
            - name: cf-space
              description: Name of space to deploy the CF app to
            - name: cf-app
              description: Name of the CF application to be deployed
            - name: pipeline-debug
              default: '0'
            - name: ibmcloud-api
              description: IBM Cloud instance to target
              default: 'https://cloud.ibm.com'
            - name: pr-url
              description: pr url
            - name: commit-timestamp
            - name: scm-type
            - name: project-id
              default: ''
            - name: custom-script
              description: user-provided script
              default: ''
          workspaces:
            - name: pipeline-ws
          tasks:
            - name: extract-repository-url
              taskRef:
                name: toolchain-extract-value
              params:
                - name: expression
                  value: >-
                    . as $toolchain | ["$(params.repository)"] | if .[0]=="" then
                    $toolchain | .services[] |
                    select(.toolchain_binding.name=="sample-repo") | .dashboard_url
                    else .[0] end
                - name: pipeline-debug
                  value: $(params.pipeline-debug)
            - name: clone-task
              taskRef:
                name: git-clone-repo
              params:
                - name: git-access-token
                  value: public
                - name: branch
                  value: main
                - name: repository
                  value: $(params.git-repo-url)
              workspaces:
                - name: output
                  workspace: pipeline-ws
            - name: build
              runAfter:
                - cra-discovery-scan
              workspaces:
                - name: output
                  workspace: pipeline-ws
              taskRef:
                name: gradle-build-java-artifact-from-source
              params:
                - name: path-to-context
                  value: $(params.path-to-context)
            - name: rolling-deploy-task
              runAfter:
                - build
              taskRef:
                name: cf-deploy-app
              params:
                - name: ibmcloud-api
                  value: $(params.ibmcloud-api)
                - name: continuous-delivery-context-secret
                  value: secure-properties
                - name: cloud-foundry-apikey-secret-key
                  value: apikey
                - name: region
                  value: $(params.region)
                - name: cf-org
                  value: $(params.cf-org)
                - name: cf-space
                  value: $(params.cf-space)
                - name: cf-app
                  value: $(params.cf-app)
                - name: cf-commands
                  value: >
                    # Push app

                    if ! cf app "$CF_APP"; then
                      cf push "$CF_APP"
                    else
                      OLD_CF_APP="${CF_APP}-OLD-$(date +"%s")"
                      rollback() {
                        set +e
                        if cf app "$OLD_CF_APP"; then
                          cf logs "$CF_APP" --recent
                          cf delete "$CF_APP" -f
                          cf rename "$OLD_CF_APP" "$CF_APP"
                        fi
                        exit 1
                      }
                      set -e
                      trap rollback ERR
                      cf rename "$CF_APP" "$OLD_CF_APP"
                      cf push "$CF_APP"
                      cf delete "$OLD_CF_APP" -f
                    fi

                    # Export app name and URL for use in later Pipeline jobs

                    export CF_APP_NAME="$CF_APP"

                    export APP_URL=http://$(cf app $CF_APP_NAME | grep -e urls: -e
                    routes: | awk '{print $2}')

                    # View logs

                    cf logs "${CF_APP}" --recent
                - name: pipeline-debug
                  value: $(params.pipeline-debug)
              workspaces:
                - name: source
                  workspace: pipeline-ws
            - name: publish-deployable-task
              taskRef:
                name: toolchain-publish-deployable-mapping
              params:
                - name: deployable-type
                  value: app
                - name: deployable-region-id
                  value: $(tasks.rolling-deploy-task.results.region)
                - name: deployable-guid
                  value: $(tasks.rolling-deploy-task.results.cf-app-guid)
                - name: deployable-cf-org-id
                  value: $(tasks.rolling-deploy-task.results.cf-org-id)
                - name: deployable-cf-org-name
                  value: $(params.cf-org)
                - name: deployable-cf-space-id
                  value: $(tasks.rolling-deploy-task.results.cf-space-id)
                - name: deployable-cf-space-name
                  value: $(params.cf-space)
                - name: environment-label
                  value: '$(params.cf-org):$(params.cf-space)'
                - name: git-inputs
                  value: >-
                    $(tasks.clone-task.results.git-repository),$(tasks.clone-task.results.git-commit),$(tasks.clone-task.results.git-branch)
                - name: pipeline-debug
                  value: $(params.pipeline-debug)
                - name: ibmcloud-api
                  value: $(params.ibmcloud-api)

      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cf-deploy-app
        spec:
          params:
            - name: region
              description: >
                (optional) Name of the region for IBM Public Cloud Cloud Foundry
                operation.

                Will default to the toolchain region if none or empty value.
              default: ''
            - name: cf-org
              description: Name of organization to be targeted
            - name: cf-space
              description: Name of space to be targeted
            - name: cf-app
              description: Name of the CF application to be managed
            - name: setup-script
              description: >-
                script that typically set up environment before the _cf-commands_
                script execution.
              default: ''
            - name: cf-commands
              description: The ibmcloud cf command(s) to run.
              default: |
                # Push app
                ibmcloud cf push "${CF_APP}"
            - name: post-execution-script
              description: >-
                script that get executed after the _cf-commands_ script has been
                executed.
              default: ''
            - name: shuttle-properties-file
              description: >-
                name of the properties file that contain properties to include in the
                environment for the _cf-commands_ script execution.
              default: ''
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: continuous-delivery-context-secret
              description: >-
                Name of the secret containing the continuous delivery pipeline context
                secrets
              default: secure-properties
            - name: cloud-foundry-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to connect to cloud
                foundry
              default: cf-apikey
            - name: pipeline-debug
              description: Pipeline debug mode
              default: '0'
          results:
            - name: region
              description: Name of the region where Cloud Foundry commands were executed
            - name: cf-target-url
              description: Cloud Foundry API endpoint
            - name: cf-org-id
              description: Id of the Cloud Foundry organization
            - name: cf-space-id
              description: Id of the Cloud Foundry space
            - name: cf-app-guid
              description: GUID of the Cloud Foundry application managed using this tasks
          workspaces:
            - name: source
              description: A workspace containing the source of the CF application to deploy
              mountPath: /artifacts
          steps:
            - name: deploy-cf-app
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              workingDir: /artifacts
              env:
                - name: CF_APP
                  value: $(params.cf-app)
                - name: CF_ORG
                  value: $(params.cf-org)
                - name: CF_SPACE
                  value: $(params.cf-space)
                - name: CF_REGION
                  value: $(params.region)
                - name: IBM_CLOUD_API
                  value: $(params.ibmcloud-api)
                - name: BUILD_NUMBER
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/build-number'']'
                - name: PIPELINE_ID
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/pipeline-id'']'
                - name: PIPELINE_STAGE_EXECUTION_ID
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
                - name: PIPELINE_TRIGGERING_USER
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/triggered-by'']'
                - name: PIPELINE_BLUEMIX_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.cloud-foundry-apikey-secret-key)
                      optional: true
                - name: SHUTTLE_PROPERTIES_FILE
                  value: $(params.shuttle-properties-file)
                - name: PIPELINE_DEBUG
                  value: $(params.pipeline-debug)
                - name: HOME
                  value: /root
              script: >
                #!/bin/bash

                set -e -o pipefail

                if [ $PIPELINE_DEBUG == 1 ]; then
                    env
                    pwd
                    ls -l
                    echo "=== cat /artifacts/_toolchain.json ==="
                    cat /artifacts/_toolchain.json
                    echo ""
                    echo "======================================"
                    trap env EXIT
                    set -x
                fi


                export PIPELINE_TOOLCHAIN_ID=$(jq -r '.toolchain_guid'
                /artifacts/_toolchain.json)

                TOOLCHAIN_REGION_ID=$(jq -r '.region_id' /artifacts/_toolchain.json)

                TOOLCHAIN_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk
                -F: '{print $3}')


                if [ -z "$CF_REGION" ]; then
                  export CF_REGION="$TOOLCHAIN_REGION"
                else
                  # if cf region is in the 'ibm:yp:<region>' just keep the region part
                  export CF_REGION=$(echo "$CF_REGION" | awk -F ':' '{print $NF;}')
                fi


                ibmcloud config --check-version false

                ibmcloud login -a $(params.ibmcloud-api) -r $CF_REGION --apikey
                $PIPELINE_BLUEMIX_API_KEY

                ibmcloud target -o "$CF_ORG" -s "$CF_SPACE"


                # Provide additional deployment properties related to CF

                #
                https://cloud.ibm.com/docs/ContinuousDelivery?topic=ContinuousDelivery-deliverypipeline_environment#deliverypipeline_environment&env_id=ibm:yp:us-south

                ibmcloud target --output JSON > /steps/ic_target.json

                export CF_ORGANIZATION_ID=$(jq -r '.cf.org.guid'
                /steps/ic_target.json)

                export CF_SPACE_ID=$(jq -r '.cf.space.guid' /steps/ic_target.json)

                export CF_TARGET_URL=$(jq -r '.cf.api_endpoint' /steps/ic_target.json)


                # Set the appropriate alias for cf to allow user to only provide cf
                commands (not only ibmcloud cf commands)

                export CF_EXEC="ibmcloud cf"


                # Remove the cf-post script content as this script is only relevant
                for classic pipeline

                echo "" > /opt/IBM/pipeline/bin/cf-post


                if [ "$SHUTTLE_PROPERTIES_FILE" ]; then
                  source $SHUTTLE_PROPERTIES_FILE
                  export $(cut -d= -f1 $SHUTTLE_PROPERTIES_FILE)
                fi

                $(params.setup-script)


                # Perform the cf-commands

                $(params.cf-commands)


                # Find CF_APP guid

                export CF_APP_GUID=$(ibmcloud cf app "$CF_APP" --guid | tail -n1)


                $(params.post-execution-script)


                # Record task results

                echo -n "$CF_REGION" > $(results.region.path)

                echo -n "$CF_TARGET_URL" > $(results.cf-target-url.path)

                echo -n "$CF_ORGANIZATION_ID" > $(results.cf-org-id.path)

                echo -n "$CF_SPACE_ID" > $(results.cf-space-id.path)

                echo -n "$CF_APP_GUID" > $(results.cf-app-guid.path)
              volumeMounts:
                - name: steps-volume
                  mountPath: /steps
                - mountPath: /cd-config
                  name: cd-config-volume
                - mountPath: /artifacts/_toolchain.json
                  subPath: toolchain.json
                  name: cd-config-volume
                - name: environment-properties
                  mountPath: /cd-config/environment-properties
                - name: secure-properties
                  mountPath: /cd-config/secure-properties
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: environment-properties
              configMap:
                name: environment-properties
            - name: secure-properties
              secret:
                secretName: secure-properties
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: toolchain-build
        spec:
          params:
            - name: custom-script
              description: >-
                The command(s) to run the build in run-build step. It will override
                the default commands
              default: ''
            - name: run-build-image
              description: The name of the image used for the run-build step
              default: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
            - name: pipeline-debug
              description: Pipeline debug mode
              default: '0'
          workspaces:
            - name: output
              description: The git repo will be cloned onto the volume backing this workspace
              mountPath: /artifacts
          steps:
            - name: run-build
              image: $(params.run-build-image)
              env:
                - name: PIPELINE_DEBUG
                  value: $(params.pipeline-debug)
                - name: CUSTOM_SCRIPT
                  value: $(params.custom-script)
              workingDir: /artifacts
              script: |
                #!/bin/bash
                set -e -o pipefail;

                if [ $PIPELINE_DEBUG == 1 ]; then
                  pwd
                  env
                  trap env EXIT
                  set -x
                fi

                if [ -z "$CUSTOM_SCRIPT" ]; then
                  if [[ -n $(find /artifacts -name pom.xml) ]]; then
                    echo "Additional build required. Running Maven build."
                    mvn -B package
                  else
                    echo "No additional build script to be run."
                  fi
                else
                  echo "Running custom script."
                  $(params.custom-script)
                fi
              volumeMounts:
                - name: cd-config-volume
                  mountPath: /cd-config
                - name: environment-properties
                  mountPath: /cd-config/environment-properties
                - name: secure-properties
                  mountPath: /cd-config/secure-properties
          volumes:
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: environment-properties
              configMap:
                name: environment-properties
            - name: secure-properties
              secret:
                secretName: secure-properties
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: toolchain-extract-value
        spec:
          params:
            - name: config-map-name
              description: name of the config map
              default: toolchain
            - name: config-map-key
              description: key of the config map
              default: toolchain.json
            - name: expression
              description: A valid jq expression which is used to search
            - name: pipeline-debug
              description: Pipeline debug mode
              default: '0'
            - name: raw
              description: determines if extracted value should be a raw string
              default: '1'
          results:
            - name: extracted-value
              description: The extracted value
          stepTemplate:
            env:
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
          steps:
            - name: extract-value-jq
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: RAW
                  value: $(params.raw)
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  #!/bin/bash

                  set -e -o pipefail;


                  if [ $PIPELINE_DEBUG == 1 ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x
                  fi


                  jq $([ "$RAW" == 1 ] && echo -r) '$(params.expression)'
                  /cd-config/$(params.config-map-key) | tr -d '\n' | tee
                  $(results.extracted-value.path)


                  file_size=$(du -b $(results.extracted-value.path) | awk '{print
                  $1}')

                  file_lines=$(wc -l $(results.extracted-value.path) | awk '{print
                  $1}')


                  if [ $file_lines -gt 80 ] || [ $file_size -gt 2048 ]; then
                    echo "Error: The extracted value is over 2048 Bytes or 80 lines - It can't be stored in result."
                    exit 1
                  fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
          volumes:
            - name: cd-config-volume
              configMap:
                name: $(params.config-map-name)
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: toolchain-publish-deployable-mapping
        spec:
          params:
            - name: deployable-type
              description: |
                type of the deployable. Can be either:
                - `app` for a CF application
                or
                - `kubernetes_cluster` for K8S deployment
            - name: deployable-region-id
              description: >
                IBM Cloud Region where the deployable is located.

                A fully qualified id is expected (such as ibm:yp:us-south)

                If not fully qualified, the ibmcloud production prefix is appended (ie
                'ibm:yp:')
            - name: deployable-guid
              description: GUID of the deployable (either cluster guid or cf app guid)
            - name: deployable-cf-org-id
              description: CF organization id (only required when deployable-type is `app`)
              default: ''
            - name: deployable-cf-org-name
              description: >
                CF organization name (only required when deployable-type is `app`).

                It will only be used for traceability event purpose. Default to
                `deployable-cf-org-id`
              default: ''
            - name: deployable-cf-space-id
              description: CF space id (only required when deployable-type is `app`)
              default: ''
            - name: deployable-cf-space-name
              description: >
                CF space name (only required when deployable-type is `app`).

                It will only be used for traceability event purpose. Default to
                `deployable-cf-space-id`
              default: ''
            - name: deployable-rg-id
              description: >-
                Resource Group id (only required when deployable-type is
                `kubernetes_cluster`)
              default: ''
            - name: deployable-url
              description: >-
                (optional) an URL that represent the deployable, e.g. the
                application's URL.
              default: ''
            - name: git-inputs
              description: >
                list of git repository,commit and branch triple (repository,commit id
                and branch spearated by a comma).

                each triple-element of the list is contained in one line
              default: ''
            - name: environment-label
              description: the label of the environment where the deployment has occured
              default: label of the deployed environment
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: continuous-delivery-context-secret
              description: >-
                Name of the secret containing the continuous delivery pipeline context
                secrets
              default: secure-properties
            - name: toolchain-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to access toolchain
                and DOI instance
              default: toolchain-apikey
            - name: pipeline-debug
              description: Pipeline debug mode
              default: '0'
          steps:
            - name: publish-deployable-mapping
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: DEPLOYABLE_TYPE
                  value: $(params.deployable-type)
                - name: DEPLOYABLE_GUID
                  value: $(params.deployable-guid)
                - name: DEPLOYABLE_URL
                  value: $(params.deployable-url)
                - name: REGION_ID
                  value: $(params.deployable-region-id)
                - name: RESOURCE_GROUP_ID
                  value: $(params.deployable-rg-id)
                - name: CF_ORG_ID
                  value: $(params.deployable-cf-org-id)
                - name: CF_ORG_NAME
                  value: $(params.deployable-cf-org-name)
                - name: CF_SPACE_ID
                  value: $(params.deployable-cf-space-id)
                - name: CF_SPACE_NAME
                  value: $(params.deployable-cf-space-name)
                - name: GIT_INPUTS
                  value: $(params.git-inputs)
                - name: ENVIRONMENT_LABEL
                  value: $(params.environment-label)
                - name: PIPELINE_ID
                  valueFrom:
                    fieldRef:
                      fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/pipeline-id'']'
                - name: IBM_CLOUD_API
                  value: $(params.ibmcloud-api)
                - name: IBM_CLOUD_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.toolchain-apikey-secret-key)
                      optional: true
                - name: PIPELINE_DEBUG
                  value: $(params.pipeline-debug)
              script: >
                #!/bin/bash

                set -e -o pipefail

                if [ $PIPELINE_DEBUG == 1 ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x
                fi

                ##########################################################################

                # Setting HOME explicitly to have ibmcloud plugins available

                # doing the export rather than env definition is a workaround

                # until https://github.com/tektoncd/pipeline/issues/1836 is fixed

                export HOME="/root"

                ##########################################################################

                TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)

                TOOLCHAIN_REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)

                TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk
                -F: '{print $3}')


                ibmcloud config --check-version false

                ibmcloud login -a $(params.ibmcloud-api) --no-region --apikey
                $IBM_CLOUD_API_KEY

                TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')


                if [ $(echo "$REGION_ID" | grep -c ':' -) -ne 1 ]; then
                  # no ':' found so append ibmcloud production prefix to region id
                  export REGION_ID="ibm:yp:$REGION_ID"
                fi


                echo "{}" | jq '.deployable={} | .toolchain={} | .source={}' >
                deployable_mapping.json


                cat deployable_mapping.json | \

                jq --arg DEPL_TYPE "$DEPLOYABLE_TYPE" --arg REGION_ID "$REGION_ID" \
                   --arg DEPL_GUID "$DEPLOYABLE_GUID" \
                  '.deployable.type=$DEPL_TYPE | .deployable.region_id=$REGION_ID | .deployable.deployable_guid=$DEPL_GUID' \
                  > tmp_deployable_mapping.json
                mv -f tmp_deployable_mapping.json deployable_mapping.json


                if [ "$DEPLOYABLE_TYPE" == "app" ]; then
                  cat deployable_mapping.json | jq --arg ORG_ID "$CF_ORG_ID" \
                    --arg SPACE_ID "$CF_SPACE_ID" \
                    '.deployable.organization_guid=$ORG_ID | .deployable.space_guid=$SPACE_ID' > tmp_deployable_mapping.json
                  mv -f tmp_deployable_mapping.json deployable_mapping.json
                elif [ "$DEPLOYABLE_TYPE" == "kubernetes_cluster" ]; then
                  cat deployable_mapping.json | jq --arg RG_ID "$RESOURCE_GROUP_ID" \
                    '.deployable.container={} | .deployable.container.guid=$RG_ID | .deployable.container.type="resource_group_id"' \
                    > tmp_deployable_mapping.json
                  mv -f tmp_deployable_mapping.json deployable_mapping.json
                else
                  echo "Deployable type $DEPLOYABLE_TYPE not expected"
                  exit 1
                fi


                if [ ! -z "$DEPLOYABLE_URL" ]; then
                  cat deployable_mapping.json | jq --arg DEPLOYABLE_URL "${DEPLOYABLE_URL}" \
                    '.deployable.url=[$DEPLOYABLE_URL]' > tmp_deployable_mapping.json
                  mv -f tmp_deployable_mapping.json deployable_mapping.json
                fi


                cat deployable_mapping.json | jq --arg TC_ID "$TOOLCHAIN_ID" --arg
                REGION_ID "$TOOLCHAIN_REGION_ID" \
                  '.toolchain.toolchain_guid=$TC_ID | .toolchain.region_id=$REGION_ID ' > tmp_deployable_mapping.json
                mv -f tmp_deployable_mapping.json deployable_mapping.json


                cat deployable_mapping.json | jq --arg PIPELINE_ID "$PIPELINE_ID" \
                  '.source.type="service_instance" | .source.source_guid=$PIPELINE_ID ' > tmp_deployable_mapping.json
                mv -f tmp_deployable_mapping.json deployable_mapping.json


                # Manage the experimental section

                if [ "$GIT_INPUTS" ]; then
                  cat deployable_mapping.json | jq '.experimental={} | .experimental.env={} | .experimental.inputs=[]' > tmp_deployable_mapping.json
                  mv -f tmp_deployable_mapping.json deployable_mapping.json

                  # Deploy environment's label
                  if [ "$DEPLOYABLE_TYPE" == "app" ]; then
                    # Add specific cloud foundry information describing the Cloud Foundry deployment environment
                    REGION_NAME=$(echo $REGION_ID | awk -F: '{print $NF}')
                    cat deployable_mapping.json | jq --arg ORG_NAME "${CF_ORG_NAME:-$CF_ORG_ID}" --arg SPACE_NAME "${CF_SPACE_NAME:-$CF_SPACE_ID}" \
                      --arg REGION_NAME "$REGION_NAME" --arg REGION_ID "$REGION_ID" \
                      '.experimental.env.org_name=$ORG_NAME | .experimental.env.space_name=$SPACE_NAME | .experimental.env.region_name=$REGION_NAME | .experimental.env.region_id=$REGION_ID' > tmp_deployable_mapping.json
                    mv -f tmp_deployable_mapping.json deployable_mapping.json
                  fi
                  cat deployable_mapping.json | jq --arg LABEL "$ENVIRONMENT_LABEL" '.experimental.env.label=$LABEL' > tmp_deployable_mapping.json
                  mv -f tmp_deployable_mapping.json deployable_mapping.json

                  while IFS= read -r git_input
                  do
                    if [ "$git_input" ]; then
                      input_repository=$(echo $git_input | awk -F, '{print $1}')
                      if [[ "$input_repository" != *.git ]]; then
                        input_repository="${input_repository}.git"
                      fi
                      input_commit=$(echo $git_input | awk -F, '{print $2}')
                      input_branch=$(echo $git_input | awk -F, '{print $3}')

                      input_service_instance_id=$(jq -r --arg git_repo "$input_repository" \
                        '.services[] | select (.parameters.repo_url==$git_repo) | .instance_id' /cd-config/toolchain.json)

                      input_service_type=$(jq -r --arg git_repo "$input_repository" \
                        '.services[] | select (.parameters.repo_url==$git_repo) | .service_id' /cd-config/toolchain.json)

                      repo_wo_git_suffix=${input_repository%".git"}

                      if [ "$input_service_type" == "github" ]; then
                        input_revision_url="${repo_wo_git_suffix}/commit/${input_commit}"
                      elif [ "$input_service_type" == "githubpublic" ]; then
                        input_revision_url="${repo_wo_git_suffix}/commit/${input_commit}"
                      elif [ "$input_service_type" == "hostedgit" ]; then
                        input_revision_url="${repo_wo_git_suffix}/commit/${input_commit}"
                      elif [ "$input_service_type" == "gitlab" ]; then
                        input_revision_url="${repo_wo_git_suffix}/commit/${input_commit}"
                      elif [ "$input_service_type" == "bitbucketgit" ]; then
                        input_revision_url="${repo_wo_git_suffix}/commits/${input_commit}"
                      else
                        # default for githubconsolidated
                        input_revision_url="${repo_wo_git_suffix}/commit/${input_commit}"
                      fi

                      # revision timestamp is not used in traceability event notification
                      timestamp=""

                      cat deployable_mapping.json | jq --arg SI_ID "$input_service_instance_id" --arg REPO "$input_repository" \
                       --arg TS "$timestamp" --arg BRANCH "$input_branch" --arg REVISION_URL "$input_revision_url" \
                       '. as $root | {service_instance_id:$SI_ID} | .data={} | .data.repo_url=$REPO | .data.repo_branch=$BRANCH | .data.timestamp=$TS | .data.revision_url=$REVISION_URL | . as $element | $root | .experimental.inputs += [$element]' \
                       > tmp_deployable_mapping.json
                      mv -f tmp_deployable_mapping.json deployable_mapping.json
                    fi
                  done < <(printf '%s\n' "$GIT_INPUTS")
                fi


                if [ $IBM_CLOUD_API == "https://test.cloud.ibm.com" ]; then
                  OTC_API_DM_URL="https://otc-api.${TOOLCHAIN_REGION}.devops.dev.cloud.ibm.com/api/v1/toolchain_deployable_mappings"
                else
                  OTC_API_DM_URL="https://otc-api.${TOOLCHAIN_REGION}.devops.cloud.ibm.com/api/v1/toolchain_deployable_mappings"
                fi


                # Check if an existing mapping exist with the given deployable guid in
                toolchain

                EXISTING_DEPLOYABLE_MAPPING=$(curl -H "accept: application/json" -H
                "Authorization: ${TOKEN}" \
                  "$OTC_API_DM_URL?toolchain_guid=${TOOLCHAIN_ID}&deployable_guid=${DEPLOYABLE_GUID}" | \
                  jq -r '.items[0].mapping_guid')

                if [ "$EXISTING_DEPLOYABLE_MAPPING" == "null" ]; then
                  HTTP_VERB="POST"
                  URL_DM_SEGMENT=""
                else
                  echo "Existing deployable mapping id found: $EXISTING_DEPLOYABLE_MAPPING"
                  HTTP_VERB="PUT"
                  URL_DM_SEGMENT="/$EXISTING_DEPLOYABLE_MAPPING"
                fi


                echo "Doing cURL -X $HTTP_VERB $OTC_API_DM_URL$URL_DM_SEGMENT with
                json payload:"

                cat deployable_mapping.json


                HTTP_STATUS_CODE=$(
                  curl -s -o /dev/null -w '%{http_code}' -X $HTTP_VERB \
                  -H "Authorization: ${TOKEN}" -H "content-type: application/json" \
                  -d @deployable_mapping.json $OTC_API_DM_URL$URL_DM_SEGMENT \
                )


                if [ "$HTTP_STATUS_CODE" == "201" ] || [ "$HTTP_STATUS_CODE" == "204"
                ]; then
                  echo "Deployable mapping created/updated. HTTP Status code = $HTTP_STATUS_CODE"
                else
                  echo "Fail to create deployable mapping ! HTTP Status code = $HTTP_STATUS_CODE"
                  exit 1
                fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
      - apiVersion: v1
        kind: ConfigMap
        metadata:
          name: retry-script
        data:
          retry.sh: |
            ##########################################################################
            # Retry the command with args that are passed to this script
            # Environment variables:
            # - (input) command with args
            # - (output) stdout of command with/without failures
            ##########################################################################
            retry_n=1
            retry_max=3
            retry_delay=2
            while true; do
              out=$("$@")
              resp=$?
              echo -n "$out"
              if [ "$resp" = "0" ]; then
                break
              else
                if [ $retry_n -lt $retry_max ]; then
                  retry_n=`expr "$retry_n" + "1"`
                  echo "Command failed. Attempt $retry_n/$retry_max:"
                  sleep $retry_delay;
                else
                  echo "The command has failed after $retry_n attempts."
                  exit 1
                fi
              fi
            done
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-bom
        spec:
          params:
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: repository
              description: the git repo url
            - name: revision
              description: the revision
              default: master
            - name: source-repository
              description: the source git repo which could be different in case of forked repo
              default: ''
            - name: commit-id
              description: git commit id
            - name: pr-url
              description: pull request html url
              default: ''
            - name: ibmcloud-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to login to
                ibmcloud
              default: apikey
            - name: continuous-delivery-context-secret
              description: Reference name for the secret resource
              default: secure-properties
            - name: resource-group
              description: target resource group (name or id) for the ibmcloud login operation
              default: ''
            - name: git-access-token
              description: >
                (optional) token to access the git repository. If this token is
                provided, there will not be an attempt

                to use the git token obtained from the authorization flow when adding
                the git integration in the toolchain
              default: ''
            - name: target-branch
              description: target branch
              default: ''
            - name: target-commit-id
              description: target branch commit id
              default: ''
            - name: project-id
              description: 'for gitlab repository, specify project-id'
              default: ''
            - name: scm-type
              description: 'source code type used (github, github-ent, gitlab)'
              default: github-ent
            - name: pipeline-debug
              description: toggles debug mode for the pipeline
              default: '0'
          results:
            - name: status
              description: 'status of bom task, possible value are-success|failure'
            - name: evidence-store
              description: filepath to store bom task evidence
          stepTemplate:
            env:
              - name: PIPELINE_RUN_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
          steps:
            - name: bom
              image: 'icr.io/continuous-delivery/cra-bom:release.2260'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: SOURCE_REPOSITORY
                  value: $(params.source-repository)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - >
                  #!/bin/sh


                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x +e
                  fi


                  TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)

                  TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' |
                  awk -F: '{print $3}')

                  TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')

                  REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')


                  API_ENDPOINT="https://cloud.ibm.com"

                  OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"

                  if echo "${REGION_ID}" | grep -q "ys1"; then
                    OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
                    API_ENDPOINT="https://test.cloud.ibm.com"
                    echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
                    echo "targeting ibm cloud @ ${API_ENDPOINT}"
                  fi


                  echo "Fetching users's token"

                  ibmcloud config --check-version false

                  sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region
                  --apikey $API_KEY

                  export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON |
                  jq -r '.iam_token' | awk '{ print $2 }')


                  echo "Fetching service urls for user's data"

                  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}"
                  \
                    -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
                    --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
                  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e
                  's/.*HTTPSTATUS://')


                  if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
                    echo ""
                    echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
                    echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
                    exit 1
                  fi


                  if [ "$HTTP_STATUS" -ne 200 ]; then
                    echo ""
                    echo "Error! Please try again."
                    exit 1
                  fi


                  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

                  gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')


                  if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
                    echo ""
                    echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
                    exit 1
                  fi


                  uiUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.controlcenter')


                  if [ -z "$uiUrl" -o "$uiUrl" = "null" ]; then
                    echo "Error fetching the ui url."
                    exit 1
                  fi


                  # In case of CI pipeline, the source repository is not passed and
                  defaults to ""

                  GITURL=$SOURCE_REPOSITORY

                  if [ "$GITURL" == "" ]; then
                    GITURL=$REPOSITORY
                  fi


                  sudo --preserve-env /gitsecure/bom-task \
                    -giturl "$GITURL" \
                    -gitbranch "$(params.revision)" \
                    -rigserviceapi ${gitsecureUrl} \
                    -ui_url ${uiUrl} \
                    -pr "$(params.pr-url)" \
                    -runid "$PIPELINE_RUN_ID" \
                    -commitid "$(params.commit-id)" \
                    -target_commitid "$(params.target-commit-id)" \
                    -target_branch "$(params.target-branch)" \
                    -results_status "$(results.status.path)" \
                    -results_evidence "./gitsecure-bom-results.json" \
                    -toolchainid "${TOOLCHAIN_ID}" \
                    -comment_md "./gitsecure-bom-comment.md"

                  echo -n "gitsecure-bom-results.json" >
                  $(results.evidence-store.path)

                  echo "COMMENT_FP=./gitsecure-bom-comment.md" >>
                  /steps/next-step-env.properties
              volumeMounts:
                - mountPath: /config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: fetch-git-information
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: API_ENDPOINT
                  value: $(params.ibmcloud-api)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  set -e -o pipefail

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                      pwd
                      env
                      trap env EXIT
                      set -x
                  fi

                  TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)

                  ##########################################################################

                  # Setting HOME explicitly to have ibmcloud plugins available

                  # doing the export rather than env definition is a workaround

                  # until https://github.com/tektoncd/pipeline/issues/1836 is fixed

                  export HOME="/root"

                  ##########################################################################

                  if [[ "$REPOSITORY" != *.git ]]; then
                    echo "Adding .git suffix to Repository URL"
                    REPOSITORY="${REPOSITORY}.git"
                  fi

                  GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY"
                  '.services[] | select (.parameters.repo_url==$git_repo) |
                  .instance_id' /cd-config/toolchain.json)

                  if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
                    echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
                    exit 1
                  fi

                  GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .service_id'
                  /cd-config/toolchain.json)

                  if [ "$GIT_SERVICE_TYPE" == "github" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
                    GIT_AUTH_USER="x-token-auth"
                  else
                    GIT_AUTH_USER="x-token-auth"
                  fi;

                  GIT_TOKEN="$(params.git-access-token)"

                  if [ -z "$GIT_TOKEN" ]; then
                    if [[ "$REGION_ID" == *"ys1"* ]]; then
                      API_ENDPOINT="https://test.cloud.ibm.com"
                      echo "targeting ibm cloud @ ${API_ENDPOINT}"
                    fi
                    echo "Fetching token for $REPOSITORY"
                    ibmcloud config --check-version false
                    sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
                    if [ "$(params.resource-group)" ]; then
                      ibmcloud target -g $(params.resource-group)
                    fi
                    TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
                    GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)
                    # GIT_TOKEN_URL is like https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
                    # as there is already an url param git_id, just put the additional ones using &
                    echo "Doing cURL to ${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
                      GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
                      echo "Access token found for the Git integration (repository url: $REPOSITORY)"
                    else
                      echo "No access token found for the Git integration (repository url: $REPOSITORY)"
                      cat /steps/github_token_result.json
                      exit 1
                    fi
                  else
                    echo "Using git Access Token provided"
                  fi

                  GIT_API_ROOT_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.api_root_url'
                  /cd-config/toolchain.json)

                  GIT_OWNER_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.owner_id'
                  /cd-config/toolchain.json)

                  GIT_REPO_NAME=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.repo_name'
                  /cd-config/toolchain.json)

                  GIT_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select
                  (.parameters.repo_url==$git_repo) | .parameters.git_id'
                  /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  echo "GIT_REPOSITORY=$REPOSITORY" >> /steps/next-step-env.properties

                  echo "GIT_AUTH_USER=$GIT_AUTH_USER" >>
                  /steps/next-step-env.properties

                  echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties

                  echo "GIT_SERVICE_TYPE=$GIT_SERVICE_TYPE" >>
                  /steps/next-step-env.properties

                  echo "GIT_ID=$GIT_ID" >> /steps/next-step-env.properties

                  echo "GIT_API_ROOT_URL=$GIT_API_ROOT_URL" >>
                  /steps/next-step-env.properties

                  echo "GIT_OWNER_ID=$GIT_OWNER_ID" >> /steps/next-step-env.properties

                  echo "GIT_REPO_NAME=$GIT_REPO_NAME" >>
                  /steps/next-step-env.properties

                  echo "TOOLCHAIN_REGION=$TOOLCHAIN_REGION" >>
                  /steps/next-step-env.properties

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    cat /steps/next-step-env.properties
                  fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: comment-editor
              image: 'icr.io/continuous-delivery/cra-comm-editor:release.2264'
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - |
                  #!/bin/sh
                  source /steps/next-step-env.properties

                  if [ -n "$(params.scm-type)" ]; then
                    case "$(params.repository)" in
                      *git.cloud.ibm.com*)
                        if [ "$(params.scm-type)" != "gitlab" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                          exit 1
                        fi
                        ;;
                      *ibm.com*)
                        if [ "$(params.scm-type)" != "github-ent" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                          exit 1
                        fi
                        ;;
                      *)
                        if [ "$(params.scm-type)" != "github" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                          exit 1
                        fi
                        ;;
                    esac
                  fi

                  /usr/local/bin/comm-editor \
                    -repo-url "$(params.repository)" \
                    -pr-url "$(params.pr-url)" \
                    -token "$GIT_TOKEN" \
                    -comment-fp "$COMMENT_FP" \
                    -project-id "$(params.project-id)" \
                    -scm-type "$(params.scm-type)"

                  COMM_RESULT=$?
                  if [ "$COMM_RESULT" != "0" ]; then
                    echo "Error posting comment to pull request"
                    exit 1
                  fi
              volumeMounts:
                - mountPath: /steps
                  name: steps-volume
          workspaces:
            - name: artifacts
              mountPath: /artifacts
            - name: secrets
              mountPath: /secrets
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: secrets
              secret:
                secretName: $(params.continuous-delivery-context-secret)
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: retry-script
              configMap:
                name: retry-script
                items:
                  - key: retry.sh
                    path: retry.sh
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-cis-check
        spec:
          params:
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: repository
              description: the git repo
            - name: revision
              description: the revision
              default: master
            - name: source-repository
              description: the source git repo which could be different in case of forked repo
              default: ''
            - name: commit-id
              description: git commit id
            - name: pr-url
              description: pull request html url
              default: ''
            - name: ibmcloud-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to login to
                ibmcloud
              default: apikey
            - name: continuous-delivery-context-secret
              description: Reference name for the secret resource
              default: secure-properties
            - name: git-access-token
              description: >
                (optional) token to access the git repository. If this token is
                provided, there will not be an attempt

                to use the git token obtained from the authorization flow when adding
                the git integration in the toolchain
              default: ''
            - name: resource-group
              description: target resource group (name or id) for the ibmcloud login operation
              default: ''
            - name: project-id
              description: for gitlab repository specify project-id
              default: ''
            - name: directory-name
              description: directory name where the repository is cloned
            - name: scm-type
              description: 'source code type used (github, github-ent, gitlab)'
              default: github-ent
            - name: pipeline-debug
              description: Pipeline debug mode. Value can be 0 or 1. Default to 0
              default: '0'
          results:
            - name: status
              description: 'status of cis task, possible value are-success|failure'
            - name: evidence-store
              description: filepath to store cis task evidence
          stepTemplate:
            env:
              - name: PIPELINE_RUN_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
          steps:
            - name: cis
              image: 'icr.io/continuous-delivery/cra-cis:release.2268'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: SOURCE_REPOSITORY
                  value: $(params.source-repository)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - >
                  #!/bin/sh

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x +e
                  fi


                  REPO_DIR_PATH="/artifacts/$(params.directory-name)"


                  TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)

                  TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' |
                  awk -F: '{print $3}')

                  TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')

                  REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')


                  API_ENDPOINT="https://cloud.ibm.com"

                  OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"

                  if echo "${REGION_ID}" | grep -q "ys1"; then
                    OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
                    API_ENDPOINT="https://test.cloud.ibm.com"
                    echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
                    echo "targeting ibm cloud @ ${API_ENDPOINT}"
                  fi


                  echo "Fetching users's token"

                  ibmcloud config --check-version false

                  sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region
                  --apikey $API_KEY

                  export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON |
                  jq -r '.iam_token' | awk '{ print $2 }')


                  echo "Fetching service urls for user's data"

                  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}"
                  \
                    -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
                    --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
                  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e
                  's/.*HTTPSTATUS://')


                  if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
                    echo ""
                    echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
                    echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
                    exit 1
                  fi


                  if [ "$HTTP_STATUS" -ne 200 ]; then
                    echo ""
                    echo "Error! Please try again."
                    exit 1
                  fi


                  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

                  gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')


                  if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
                    echo ""
                    echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
                    exit 1
                  fi


                  # In case of CI pipeline, the source repository is not passed and
                  defaults to ""

                  GITURL=$SOURCE_REPOSITORY

                  if [ "$GITURL" == "" ]; then
                    GITURL=$REPOSITORY
                  fi


                  /usr/local/bin/deploy-analytic \
                    -giturl "$GITURL" \
                    -gitbranch "$(params.revision)" \
                    -repodir $REPO_DIR_PATH \
                    -apiservice "${gitsecureUrl}" \
                    -runid "$PIPELINE_RUN_ID" \
                    -commitid "$(params.commit-id)" \
                    -results_status "$(results.status.path)" \
                    -results_evidence "./gitsecure-cis-results.json" \
                    -toolchainid "${TOOLCHAIN_ID}" \
                    -comment_md "./gitsecure-cis-comment.md"

                  echo -n "gitsecure-cis-results.json" >
                  $(results.evidence-store.path)

                  echo "COMMENT_FP=./gitsecure-cis-comment.md" >>
                  /steps/next-step-env.properties
              volumeMounts:
                - mountPath: /config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: fetch-git-information
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: API_ENDPOINT
                  value: $(params.ibmcloud-api)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  set -e -o pipefail

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                      pwd
                      env
                      trap env EXIT
                      set -x
                  fi

                  TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)

                  ##########################################################################

                  # Setting HOME explicitly to have ibmcloud plugins available

                  # doing the export rather than env definition is a workaround

                  # until https://github.com/tektoncd/pipeline/issues/1836 is fixed

                  export HOME="/root"

                  ##########################################################################

                  if [[ "$REPOSITORY" != *.git ]]; then
                    echo "Adding .git suffix to Repository URL"
                    REPOSITORY="${REPOSITORY}.git"
                  fi

                  GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY"
                  '.services[] | select (.parameters.repo_url==$git_repo) |
                  .instance_id' /cd-config/toolchain.json)

                  if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
                    echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
                    exit 1
                  fi

                  GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .service_id'
                  /cd-config/toolchain.json)

                  if [ "$GIT_SERVICE_TYPE" == "github" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
                    GIT_AUTH_USER="x-token-auth"
                  else
                    GIT_AUTH_USER="x-token-auth"
                  fi;

                  GIT_TOKEN="$(params.git-access-token)"

                  if [ -z "$GIT_TOKEN" ]; then
                    if [[ "$REGION_ID" == *"ys1"* ]]; then
                      API_ENDPOINT="https://test.cloud.ibm.com"
                      echo "targeting ibm cloud @ ${API_ENDPOINT}"
                    fi
                    echo "Fetching token for $REPOSITORY"
                    ibmcloud config --check-version false
                    sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
                    if [ "$(params.resource-group)" ]; then
                      ibmcloud target -g $(params.resource-group)
                    fi
                    TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
                    GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)
                    # GIT_TOKEN_URL is like https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
                    # as there is already an url param git_id, just put the additional ones using &
                    echo "Doing cURL to ${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
                      GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
                      echo "Access token found for the Git integration (repository url: $REPOSITORY)"
                    else
                      echo "No access token found for the Git integration (repository url: $REPOSITORY)"
                      cat /steps/github_token_result.json
                      exit 1
                    fi
                  else
                    echo "Using git Access Token provided"
                  fi

                  GIT_API_ROOT_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.api_root_url'
                  /cd-config/toolchain.json)

                  GIT_OWNER_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.owner_id'
                  /cd-config/toolchain.json)

                  GIT_REPO_NAME=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.repo_name'
                  /cd-config/toolchain.json)

                  GIT_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select
                  (.parameters.repo_url==$git_repo) | .parameters.git_id'
                  /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  echo "GIT_REPOSITORY=$REPOSITORY" >> /steps/next-step-env.properties

                  echo "GIT_AUTH_USER=$GIT_AUTH_USER" >>
                  /steps/next-step-env.properties

                  echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties

                  echo "GIT_SERVICE_TYPE=$GIT_SERVICE_TYPE" >>
                  /steps/next-step-env.properties

                  echo "GIT_ID=$GIT_ID" >> /steps/next-step-env.properties

                  echo "GIT_API_ROOT_URL=$GIT_API_ROOT_URL" >>
                  /steps/next-step-env.properties

                  echo "GIT_OWNER_ID=$GIT_OWNER_ID" >> /steps/next-step-env.properties

                  echo "GIT_REPO_NAME=$GIT_REPO_NAME" >>
                  /steps/next-step-env.properties

                  echo "TOOLCHAIN_REGION=$TOOLCHAIN_REGION" >>
                  /steps/next-step-env.properties

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    cat /steps/next-step-env.properties
                  fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: comment-editor
              image: 'icr.io/continuous-delivery/cra-comm-editor:release.2264'
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - |
                  #!/bin/sh
                  source /steps/next-step-env.properties

                  if [ -n "$(params.scm-type)" ]; then
                    case "$(params.repository)" in
                      *git.cloud.ibm.com*)
                        if [ "$(params.scm-type)" != "gitlab" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                          exit 1
                        fi
                        ;;
                      *ibm.com*)
                        if [ "$(params.scm-type)" != "github-ent" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                          exit 1
                        fi
                        ;;
                      *)
                        if [ "$(params.scm-type)" != "github" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                          exit 1
                        fi
                        ;;
                    esac
                  fi

                  /usr/local/bin/comm-editor \
                    -repo-url "$(params.repository)" \
                    -pr-url "$(params.pr-url)" \
                    -token "$GIT_TOKEN" \
                    -comment-fp "$COMMENT_FP" \
                    -project-id "$(params.project-id)" \
                    -scm-type "$(params.scm-type)"

                  COMM_RESULT=$?
                  if [ "$COMM_RESULT" != "0" ]; then
                    echo "Error posting comment to pull request"
                    exit 1
                  fi
              volumeMounts:
                - mountPath: /steps
                  name: steps-volume
          workspaces:
            - name: artifacts
              mountPath: /artifacts
            - name: secrets
              mountPath: /secrets
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: secrets
              secret:
                secretName: $(params.continuous-delivery-context-secret)
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: retry-script
              configMap:
                name: retry-script
                items:
                  - key: retry.sh
                    path: retry.sh
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-comm-editor
        spec:
          params:
            - name: repository
              description: the git repo url
            - name: pr-url
              description: merge request url
              default: ''
            - name: project-id
              description: project id
              default: ''
            - name: comment-fp
              description: comments filepath
            - name: scm-type
              description: 'source code type used (github, github-ent, gitlab)'
          steps:
            - name: comm-editor
              image: 'icr.io/continuous-delivery/cra-comm-editor:release.2264'
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - |
                  #!/bin/sh
                  source /steps/next-step-env.properties

                  if [ -n "$(params.scm-type)" ]; then
                    case "$(params.repository)" in
                      *git.cloud.ibm.com*)
                        if [ "$(params.scm-type)" != "gitlab" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                          exit 1
                        fi
                        ;;
                      *ibm.com*)
                        if [ "$(params.scm-type)" != "github-ent" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                          exit 1
                        fi
                        ;;
                      *)
                        if [ "$(params.scm-type)" != "github" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                          exit 1
                        fi
                        ;;
                    esac
                  fi

                  /usr/local/bin/comm-editor \
                    -repo-url "$(params.repository)" \
                    -pr-url "$(params.pr-url)" \
                    -token "$GIT_TOKEN" \
                    -user "$GIT_USER" \
                    -comment-fp "$(params.comment-fp)" \
                    -project-id "$(params.project-id)" \
                    -scm-type "$(params.scm-type)"

                  COMM_RESULT=$?
                  if [ "$COMM_RESULT" != "0" ]; then
                    echo "Error posting comment to pull request"
                    exit 1
                  fi
          workspaces:
            - name: artifacts
              mountPath: /artifacts
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-discovery
        spec:
          params:
            - name: repository
              description: the git repo
            - name: revision
              description: the revision
              default: master
            - name: commit-id
              description: git commit id
            - name: commit-timestamp
              description: git commit timestamp
            - name: directory-name
              description: directory name where the repository is cloned
            - name: pipeline-debug
              description: Pipeline debug mode. Value can be 0 or 1. Default to 0
              default: '0'
            - name: continuous-delivery-context-secret
              description: Reference name for the secret resource
              default: secure-properties
            - name: ibmcloud-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to login to
                ibmcloud
              default: apikey
            - name: continuous-delivery-context-environment
              description: >-
                Name of the configmap containing the continuous delivery pipeline
                context environment properties
              default: environment-properties
            - name: maven-exclude-scopes
              description: Tag dependencies in scope as dev for the vulnerability scan
              default: ''
            - name: gradle-exclude-configs
              description: >-
                Tag dependencies in gradle configurations as dev for the vulnerability
                scan
              default: ''
            - name: nodejs-create-package-lock
              description: >-
                Enable CRA discovery to build the package-lock.json file for node.js
                repos
              default: 'false'
            - name: python-create-requirements-txt
              description: >-
                Enable CRA discovery to build the requirements.txt file for python
                repos
              default: 'false'
          results:
            - name: status
              description: 'status of discovery task, possible value are-success|failure'
          stepTemplate:
            env:
              - name: PIPELINE_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/pipeline-id'']'
              - name: PIPELINE_RUN_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
          steps:
            - name: discovery
              image: 'icr.io/continuous-delivery/cra-discovery:release.2258'
              env:
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
                - name: DOCKER_CONFIG
                  value: /artifacts
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - >
                  #!/bin/sh

                  if [ "$PIPELINE_DEBUG" = "1" ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x +e
                  fi


                  REPO_DIR_PATH="/artifacts/$(params.directory-name)"


                  TOOLCHAIN_REGION=$(cat /config/toolchain.json | jq -r '.region_id' |
                  awk -F: '{print $3}')

                  TOOLCHAIN_ID=$(cat /config/toolchain.json | jq -r '.toolchain_guid')

                  REGION_ID=$(cat /config/toolchain.json | jq -r '.region_id')


                  API_ENDPOINT="https://cloud.ibm.com"

                  OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"

                  PIPELINE_URL="https://cloud.ibm.com"

                  IAM_URL="https://iam.cloud.ibm.com"

                  if echo "${REGION_ID}" | grep -q "ys1"; then
                    OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
                    API_ENDPOINT="https://test.cloud.ibm.com"
                    PIPELINE_URL="https://dev.console.test.cloud.ibm.com"
                    IAM_URL="https://iam.test.cloud.ibm.com"
                    echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
                    echo "targeting ibm cloud @ ${API_ENDPOINT}"
                  fi


                  PIPELINE_URL="${PIPELINE_URL}/devops/pipelines/tekton/${PIPELINE_ID}/runs/${PIPELINE_RUN_ID}?env_id=${REGION_ID}"


                  echo "Fetching users's token"

                  ibmcloud config --check-version false

                  sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region
                  --apikey $API_KEY

                  export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON |
                  jq -r '.iam_token' | awk '{ print $2 }')


                  echo "Fetching service urls for user's data"

                  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}"
                  \
                    -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
                    --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
                  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e
                  's/.*HTTPSTATUS://')


                  if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
                    echo ""
                    echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
                    echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
                    exit 1
                  fi


                  if [ "$HTTP_STATUS" -ne 200 ]; then
                    echo ""
                    echo "Error! Please try again."
                    exit 1
                  fi


                  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

                  gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')


                  if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
                    echo ""
                    echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
                    exit 1
                  fi


                  # create a dry-run k8s secret of type docker-registry to obtain

                  # the pull secrets for the base image used in the dockerfile

                  # this is optional, but sometimes useful, for example when using

                  # UBI images from RedHat


                  if [ -f "/properties/build-baseimage-auth-user" ] \
                    && [ -f "/secrets/build-baseimage-auth-password" ] \
                    && [ -f "/properties/build-baseimage-auth-host" ]; then
                    echo "Adding pull secrets to access base image registry $(cat /properties/build-baseimage-auth-host)"
                    kubectl create secret --dry-run=client --output=json \
                      docker-registry registry-dockerconfig-secret \
                      --docker-username="$(cat /properties/build-baseimage-auth-user)" \
                      --docker-password="$(cat /secrets/build-baseimage-auth-password)" \
                      --docker-server="$(cat /properties/build-baseimage-auth-host)" \
                      --docker-email="$(cat /properties/build-baseimage-auth-email)" | \
                      jq -r '.data[".dockerconfigjson"]' | base64 -d > config.json
                  fi


                  /usr/local/bin/discovery \
                    -giturl "$(params.repository)" \
                    -gitbranch "$(params.revision)" \
                    -repodir $REPO_DIR_PATH  \
                    -rigapi "${gitsecureUrl}" \
                    -region "${TOOLCHAIN_REGION}" \
                    -pipelineurl "${PIPELINE_URL}" \
                    -iamurl "${IAM_URL}" \
                    -runid "${PIPELINE_RUN_ID}" \
                    -commitid "$(params.commit-id)" \
                    -commitTimestamp "$(params.commit-timestamp)" \
                    -toolchainid "${TOOLCHAIN_ID}" \
                    -nodejs.createpackagelock="$(params.nodejs-create-package-lock)" \
                    -python.createrequirementstxt="$(params.python-create-requirements-txt)" \
                    -excludescopes "$(params.maven-exclude-scopes)" \
                    -excludeconfigurations "$(params.gradle-exclude-configs)"
              volumeMounts:
                - mountPath: /config
                  name: config-volume
                - mountPath: /var/run/
                  name: docker-socket
                - mountPath: /properties
                  name: environment-properties
                - mountPath: /secrets
                  name: secure-properties
                - mountPath: /scripts
                  name: retry-script
          sidecars:
            - image: 'docker:19.03-dind'
              name: server
              securityContext:
                privileged: true
              env:
                - name: DOCKER_BUILDKIT
                  value: 1
                - name: DOCKER_TLS_CERTDIR
                  value: /certs
              volumeMounts:
                - mountPath: /var/run/
                  name: docker-socket
              readinessProbe:
                periodSeconds: 1
                exec:
                  command:
                    - ls
                    - /certs/client/ca.pem
          workspaces:
            - name: artifacts
              mountPath: /artifacts
          volumes:
            - name: config-volume
              configMap:
                name: toolchain
            - name: docker-socket
              emptyDir: {}
            - name: environment-properties
              configMap:
                name: $(params.continuous-delivery-context-environment)
            - name: secure-properties
              secret:
                secretName: $(params.continuous-delivery-context-secret)
            - name: retry-script
              configMap:
                name: retry-script
                items:
                  - key: retry.sh
                    path: retry.sh
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-terraform-scan
        spec:
          params:
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: repository
              description: the git repo
            - name: branch
              description: the branch
              default: master
            - name: commit-id
              description: git commit id
              default: ''
            - name: tf-dir
              description: the directory where the terraform main entry file is found
              default: ''
            - name: ibmcloud-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to login to
                ibmcloud
              default: apikey
            - name: continuous-delivery-context-secret
              description: Reference name for the secret resource
              default: secure-properties
            - name: directory-name
              description: directory name where the repository is cloned
            - name: pipeline-debug
              description: toggles debug mode for the pipeline
              default: '0'
            - name: policy-config-json
              description: Configure policies to control thresholds
              default: ''
            - name: pr-url
              description: pull request html url
              default: ''
            - name: project-id
              description: 'for gitlab repository, specify project-id'
              default: ''
            - name: scm-type
              description: 'source code type used (github, github-ent, gitlab)'
              default: github-ent
            - name: resource-group
              description: target resource group (name or id) for the ibmcloud login operation
              default: ''
            - name: git-access-token
              description: >
                (optional) token to access the git repository. If this token is
                provided, there will not be an attempt

                to use the git token obtained from the authorization flow when adding
                the git integration in the toolchain
              default: ''
            - name: tf-var-file
              description: (optional) terraform var-file
              default: ''
          results:
            - name: status
              description: 'status of deployment analyzer task, possible value are- success|failed'
            - name: evidence-store
              description: filepath to store deployment analyzer task evidence
          stepTemplate:
            env:
              - name: PIPELINE_RUN_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
              - name: VAR_FILE
                value: $(params.tf-var-file)
          steps:
            - name: terraform-compliance
              image: 'icr.io/continuous-delivery/cra-terraform:release.2104'
              envFrom:
                - configMapRef:
                    name: environment-properties
                - secretRef:
                    name: secure-properties
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              imagePullPolicy: Always
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  if [[ "$PIPELINE_DEBUG" == "1" ]]; then
                    pwd
                    ls /artifacts/
                    env
                    trap env EXIT
                    set -x +e
                  fi


                  REPO_DIR_PATH="/artifacts/$(params.directory-name)"

                  TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)

                  TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' |
                  awk -F: '{print $3}')

                  TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')

                  REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')

                  API_ENDPOINT="https://cloud.ibm.com"

                  OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"

                  if echo "${REGION_ID}" | grep -q "ys1"; then
                    OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
                    API_ENDPOINT="https://test.cloud.ibm.com"
                    echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
                    echo "targeting ibm cloud @ ${API_ENDPOINT}"
                  fi

                  echo "Fetching users's token"

                  ibmcloud config --check-version false

                  sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region
                  --apikey $API_KEY

                  export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON |
                  jq -r '.iam_token' | awk '{ print $2 }')

                  echo "Fetching service urls for user's data"

                  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}"
                  \
                    -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
                    --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
                  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e
                  's/.*HTTPSTATUS://')

                  if [[ "$HTTP_STATUS" -eq 401 || "$HTTP_STATUS" -eq 403 ]]; then
                    echo ""
                    echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
                    echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
                    exit 1
                  fi

                  if [[ "$HTTP_STATUS" -ne 200 ]]; then
                    echo ""
                    echo "Error! Please try again."
                    exit 1
                  fi

                  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

                  gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')

                  if [[ -z "$gitsecureUrl" || "$gitsecureUrl" = "null" ]]; then
                    echo ""
                    echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
                    exit 1
                  fi


                  echo "Running terraform compliance task"

                  if [[ $PIPELINE_DEBUG == 1 ]];
                    then
                      ls $REPO_DIR_PATH
                  fi

                  result="failed"

                  LOG_LEVEL="info"


                  if [[ "$(params.policy-config-json)" == "" ]];

                  then
                    node /usr/src/index.js --git_token "NA" --repository $(params.repository) --gitClonedDir $REPO_DIR_PATH \
                      --INPUT_TF_DIR $(params.tf-dir) --revision $(params.branch) --commitid $(params.commit-id) --gitSecureApi $gitsecureUrl --pipelinerunid $PIPELINE_RUN_ID --toolchainid $TOOLCHAIN_ID --prnumber "NA" --authToken ${IBM_CLOUD_BEARER} --LOG_LEVEL $LOG_LEVEL --silent 1
                  else
                    node /usr/src/index.js --policyConfig $(params.policy-config-json) --git_token "NA" --repository $(params.repository) --gitClonedDir $REPO_DIR_PATH \
                      --INPUT_TF_DIR $(params.tf-dir) --revision $(params.branch) --commitid $(params.commit-id) --gitSecureApi $gitsecureUrl --pipelinerunid $PIPELINE_RUN_ID -toolchainid $TOOLCHAIN_ID --prnumber "NA" --authToken ${IBM_CLOUD_BEARER} --LOG_LEVEL $LOG_LEVEL --silent 1
                  fi


                  if [ $? == 0 ]; then export result="success"; fi


                  if [[ $PIPELINE_DEBUG == 1 ]];
                    then
                      cat /usr/policies/ibm/terraform-config.rego
                      echo $result
                      cat deploymant-analyzer.json
                  fi


                  echo -n $result > "$(results.status.path)"

                  echo -n "deploymant-analyzer.json" > $(results.evidence-store.path)


                  cp ./da-terraform-check-comment.md
                  /steps/da-terraform-check-comment.md

                  echo "COMMENT_FP=/steps/da-terraform-check-comment.md" >>
                  /steps/next-step-env.properties
              volumeMounts:
                - mountPath: /config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: fetch-git-information
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: API_ENDPOINT
                  value: $(params.ibmcloud-api)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  set -e -o pipefail

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                      pwd
                      env
                      trap env EXIT
                      set -x
                  fi

                  TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)

                  ##########################################################################

                  # Setting HOME explicitly to have ibmcloud plugins available

                  # doing the export rather than env definition is a workaround

                  # until https://github.com/tektoncd/pipeline/issues/1836 is fixed

                  export HOME="/root"

                  ##########################################################################

                  if [[ "$REPOSITORY" != *.git ]]; then
                    echo "Adding .git suffix to Repository URL"
                    REPOSITORY="${REPOSITORY}.git"
                  fi

                  GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY"
                  '.services[] | select (.parameters.repo_url==$git_repo) |
                  .instance_id' /cd-config/toolchain.json)

                  if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
                    echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
                    exit 1
                  fi

                  GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .service_id'
                  /cd-config/toolchain.json)

                  if [ "$GIT_SERVICE_TYPE" == "github" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
                    GIT_AUTH_USER="x-token-auth"
                  else
                    GIT_AUTH_USER="x-token-auth"
                  fi;

                  GIT_TOKEN="$(params.git-access-token)"

                  if [ -z "$GIT_TOKEN" ]; then
                    if [[ "$REGION_ID" == *"ys1"* ]]; then
                      API_ENDPOINT="https://test.cloud.ibm.com"
                      echo "targeting ibm cloud @ ${API_ENDPOINT}"
                    fi
                    echo "Fetching token for $REPOSITORY"
                    ibmcloud config --check-version false
                    sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
                    if [ "$(params.resource-group)" ]; then
                      ibmcloud target -g $(params.resource-group)
                    fi
                    TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
                    GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)
                    # GIT_TOKEN_URL is like https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
                    # as there is already an url param git_id, just put the additional ones using &
                    echo "Doing cURL to ${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
                      GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
                      echo "Access token found for the Git integration (repository url: $REPOSITORY)"
                    else
                      echo "No access token found for the Git integration (repository url: $REPOSITORY)"
                      cat /steps/github_token_result.json
                      exit 1
                    fi
                  else
                    echo "Using git Access Token provided"
                  fi

                  GIT_API_ROOT_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.api_root_url'
                  /cd-config/toolchain.json)

                  GIT_OWNER_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.owner_id'
                  /cd-config/toolchain.json)

                  GIT_REPO_NAME=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.repo_name'
                  /cd-config/toolchain.json)

                  GIT_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select
                  (.parameters.repo_url==$git_repo) | .parameters.git_id'
                  /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  echo "GIT_REPOSITORY=$REPOSITORY" >> /steps/next-step-env.properties

                  echo "GIT_AUTH_USER=$GIT_AUTH_USER" >>
                  /steps/next-step-env.properties

                  echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties

                  echo "GIT_SERVICE_TYPE=$GIT_SERVICE_TYPE" >>
                  /steps/next-step-env.properties

                  echo "GIT_ID=$GIT_ID" >> /steps/next-step-env.properties

                  echo "GIT_API_ROOT_URL=$GIT_API_ROOT_URL" >>
                  /steps/next-step-env.properties

                  echo "GIT_OWNER_ID=$GIT_OWNER_ID" >> /steps/next-step-env.properties

                  echo "GIT_REPO_NAME=$GIT_REPO_NAME" >>
                  /steps/next-step-env.properties

                  echo "TOOLCHAIN_REGION=$TOOLCHAIN_REGION" >>
                  /steps/next-step-env.properties

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    cat /steps/next-step-env.properties
                  fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: comment-editor
              image: 'icr.io/continuous-delivery/cra-comm-editor:release.2264'
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - |
                  #!/bin/sh
                  source /steps/next-step-env.properties

                  if [ -n "$(params.scm-type)" ]; then
                    case "$(params.repository)" in
                      *git.cloud.ibm.com*)
                        if [ "$(params.scm-type)" != "gitlab" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                          exit 1
                        fi
                        ;;
                      *ibm.com*)
                        if [ "$(params.scm-type)" != "github-ent" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                          exit 1
                        fi
                        ;;
                      *)
                        if [ "$(params.scm-type)" != "github" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                          exit 1
                        fi
                        ;;
                    esac
                  fi

                  /usr/local/bin/comm-editor \
                    -repo-url "$(params.repository)" \
                    -pr-url "$(params.pr-url)" \
                    -token "$GIT_TOKEN" \
                    -comment-fp "$COMMENT_FP" \
                    -project-id "$(params.project-id)" \
                    -scm-type "$(params.scm-type)"

                  COMM_RESULT=$?
                  if [ "$COMM_RESULT" != "0" ]; then
                    echo "Error posting comment to pull request"
                    exit 1
                  fi
              volumeMounts:
                - mountPath: /steps
                  name: steps-volume
          workspaces:
            - name: artifacts
              mountPath: /artifacts
            - name: secrets
              mountPath: /secrets
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: secrets
              secret:
                secretName: $(params.continuous-delivery-context-secret)
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: retry-script
              configMap:
                name: retry-script
                items:
                  - key: retry.sh
                    path: retry.sh
      - apiVersion: tekton.dev/v1beta1
        kind: Task
        metadata:
          name: cra-vulnerability-remediation
        spec:
          params:
            - name: ibmcloud-api
              description: the ibmcloud api
              default: 'https://cloud.ibm.com'
            - name: repository
              description: the git repo
            - name: source-repository
              description: the source git repo which could be different in case of forked repo
              default: ''
            - name: revision
              description: the revision
              default: master
            - name: pr-url
              description: pull request url
              default: ''
            - name: commit-id
              description: git commit id
            - name: ibmcloud-apikey-secret-key
              description: >-
                field in the secret that contains the api key used to login to
                ibmcloud
              default: apikey
            - name: continuous-delivery-context-secret
              description: Reference name for the secret resource
              default: secure-properties
            - name: git-access-token
              description: >
                (optional) token to access the git repository. If this token is
                provided, there will not be an attempt

                to use the git token obtained from the authorization flow when adding
                the git integration in the toolchain
              default: ''
            - name: resource-group
              description: target resource group (name or id) for the ibmcloud login operation
              default: ''
            - name: project-id
              description: 'for gitlab repository, specify project-id'
              default: ''
            - name: scm-type
              description: 'source code type used (github, github-ent, gitlab)'
              default: github-ent
            - name: pipeline-debug
              description: Pipeline debug mode. Value can be 0 or 1. Default to 0
              default: '0'
            - name: exclude-dev
              description: (optional) Exclude dev dependencies during scan
              default: 'false'
            - name: repo-dir
              description: Specifies the path for the repository or .cracveomit file
              default: /artifacts
          results:
            - name: status
              description: 'status of vulnerability task, possible value are-success|failure'
            - name: evidence-store
              description: filepath to store vulnerability task evidence
          stepTemplate:
            env:
              - name: PIPELINE_RUN_ID
                valueFrom:
                  fieldRef:
                    fieldPath: 'metadata.annotations[''devops.cloud.ibm.com/tekton-pipeline'']'
              - name: PIPELINE_DEBUG
                value: $(params.pipeline-debug)
          steps:
            - name: remediation
              image: 'icr.io/continuous-delivery/cra-vulnerability:release.2266'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: SOURCE_REPOSITORY
                  value: $(params.source-repository)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
                - name: EXCLUDE_DEV
                  value: $(params.exclude-dev)
                - name: REPO_DIR
                  value: $(params.repo-dir)
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - >
                  #!/bin/sh

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    pwd
                    env
                    trap env EXIT
                    set -x +e
                  fi


                  TOOLCHAIN_CONFIG=$(cat /config/toolchain.json)

                  TOOLCHAIN_REGION=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id' |
                  awk -F: '{print $3}')

                  TOOLCHAIN_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.toolchain_guid')

                  REGION_ID=$(echo ${TOOLCHAIN_CONFIG} | jq -r '.region_id')


                  API_ENDPOINT="https://cloud.ibm.com"

                  OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.cloud.ibm.com"

                  if echo "${REGION_ID}" | grep -q "ys1"; then
                    OTC_BROKER_BASE_URL="https://otcbroker.devopsinsights.dev.cloud.ibm.com"
                    API_ENDPOINT="https://test.cloud.ibm.com"
                    echo "targeting otc broker @ ${OTC_BROKER_BASE_URL}"
                    echo "targeting ibm cloud @ ${API_ENDPOINT}"
                  fi


                  echo "Fetching users's token"

                  ibmcloud config --check-version false

                  sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region
                  --apikey $API_KEY

                  export IBM_CLOUD_BEARER=$(ibmcloud iam oauth-tokens --output JSON |
                  jq -r '.iam_token' | awk '{ print $2 }')


                  echo "Fetching service urls for user's data"

                  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}"
                  \
                    -X GET "${OTC_BROKER_BASE_URL}/globalauth/toolchainids/${TOOLCHAIN_ID}" \
                    --header "Authorization: Bearer ${IBM_CLOUD_BEARER}")
                  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e
                  's/.*HTTPSTATUS://')


                  if [ "$HTTP_STATUS" -eq 401 -o "$HTTP_STATUS" -eq 403 ]; then
                    echo ""
                    echo "Error authenticating user for toolchain_id: ${TOOLCHAIN_ID}"
                    echo "Please verify the Devops Insights card has been added to your toolchain and the api-key has access."
                    exit 1
                  fi


                  if [ "$HTTP_STATUS" -ne 200 ]; then
                    echo ""
                    echo "Error! Please try again."
                    exit 1
                  fi


                  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')

                  gitsecureUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.gitsecure')


                  if [ -z "$gitsecureUrl" -o "$gitsecureUrl" = "null" ]; then
                    echo ""
                    echo "Error IBM Code Risk Analyzer is not supported in ${REGION_ID}"
                    exit 1
                  fi


                  vcuratorUrl=$(echo ${HTTP_BODY} | jq -r '.service_urls.vcurator')


                  if [ -z "$vcuratorUrl" -o "$vcuratorUrl" = "null" ]; then
                    echo "Error fetching the vcurator url."
                    exit 1
                  fi


                  # In case of CI pipeline, the source repository is not passed and
                  defaults to ""

                  GITURL=$SOURCE_REPOSITORY

                  if [ "$GITURL" == "" ]; then
                    GITURL=$REPOSITORY
                  fi


                  /gitsecure/vulnerability-task \
                    -giturl "$GITURL" \
                    -gitbranch "$(params.revision)" \
                    -rigserviceapi "${gitsecureUrl}" \
                    -runid "$PIPELINE_RUN_ID" \
                    -commitid "$(params.commit-id)" \
                    -comment_md "./comment_md.json" \
                    -security_advisory_svc "${vcuratorUrl}" \
                    -results_status "$(results.status.path)" \
                    -results_evidence "./gitsecure-vulnerability-results.json" \
                    -toolchainid "${TOOLCHAIN_ID}" \
                    -repodir "${REPO_DIR}" \
                    -comment_md "./vulnerability-comment.md" \
                    -excludedev="${EXCLUDE_DEV}"

                  echo -n "gitsecure-vulnerability-results.json" >
                  $(results.evidence-store.path)

                  echo "COMMENT_FP=./vulnerability-comment.md" >>
                  /steps/next-step-env.properties
              volumeMounts:
                - mountPath: /config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: fetch-git-information
              image: 'icr.io/continuous-delivery/pipeline/pipeline-base-image:2.6'
              env:
                - name: REPOSITORY
                  value: $(params.repository)
                - name: API_ENDPOINT
                  value: $(params.ibmcloud-api)
                - name: API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: $(params.continuous-delivery-context-secret)
                      key: $(params.ibmcloud-apikey-secret-key)
                      optional: true
              command:
                - /bin/bash
                - '-c'
              args:
                - >
                  set -e -o pipefail

                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                      pwd
                      env
                      trap env EXIT
                      set -x
                  fi

                  TOOLCHAIN_ID=$(jq -r '.toolchain_guid' /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  REGION_ID=$(jq -r '.region_id' /cd-config/toolchain.json)

                  ##########################################################################

                  # Setting HOME explicitly to have ibmcloud plugins available

                  # doing the export rather than env definition is a workaround

                  # until https://github.com/tektoncd/pipeline/issues/1836 is fixed

                  export HOME="/root"

                  ##########################################################################

                  if [[ "$REPOSITORY" != *.git ]]; then
                    echo "Adding .git suffix to Repository URL"
                    REPOSITORY="${REPOSITORY}.git"
                  fi

                  GIT_SERVICE_INSTANCE_ID=$(jq -r --arg git_repo "$REPOSITORY"
                  '.services[] | select (.parameters.repo_url==$git_repo) |
                  .instance_id' /cd-config/toolchain.json)

                  if [ -z "$GIT_SERVICE_INSTANCE_ID" ]; then
                    echo "No Git integration (repository url: $REPOSITORY) found in the toolchain"
                    exit 1
                  fi

                  GIT_SERVICE_TYPE=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .service_id'
                  /cd-config/toolchain.json)

                  if [ "$GIT_SERVICE_TYPE" == "github" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "githubpublic" ]; then
                    GIT_AUTH_USER="x-oauth-basic"
                  elif [ "$GIT_SERVICE_TYPE" == "hostedgit" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "gitlab" ]; then
                    GIT_AUTH_USER="oauth2"
                  elif [ "$GIT_SERVICE_TYPE" == "bitbucketgit" ]; then
                    GIT_AUTH_USER="x-token-auth"
                  else
                    GIT_AUTH_USER="x-token-auth"
                  fi;

                  GIT_TOKEN="$(params.git-access-token)"

                  if [ -z "$GIT_TOKEN" ]; then
                    if [[ "$REGION_ID" == *"ys1"* ]]; then
                      API_ENDPOINT="https://test.cloud.ibm.com"
                      echo "targeting ibm cloud @ ${API_ENDPOINT}"
                    fi
                    echo "Fetching token for $REPOSITORY"
                    ibmcloud config --check-version false
                    sh /scripts/retry.sh ibmcloud login -a $API_ENDPOINT --no-region --apikey $API_KEY
                    if [ "$(params.resource-group)" ]; then
                      ibmcloud target -g $(params.resource-group)
                    fi
                    TOKEN=$(ibmcloud iam oauth-tokens --output JSON | jq -r '.iam_token')
                    GIT_TOKEN_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select (.parameters.repo_url==$git_repo) | .parameters.token_url' /cd-config/toolchain.json)
                    # GIT_TOKEN_URL is like https://otc-github-consolidated-broker.us-south.devops.cloud.ibm.com/github/token?git_id=github
                    # as there is already an url param git_id, just put the additional ones using &
                    echo "Doing cURL to ${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    curl -s -o /steps/github_token_result.json -X GET -H "Accept: application/json" -H "Authorization: $TOKEN" "${GIT_TOKEN_URL}&toolchain_id=${TOOLCHAIN_ID}&service_instance_id=${GIT_SERVICE_INSTANCE_ID}&repo_url=${REPOSITORY}"
                    if jq -e '.access_token' /steps/github_token_result.json > /dev/null 2>&1; then
                      GIT_TOKEN=$(jq -r '.access_token' /steps/github_token_result.json)
                      echo "Access token found for the Git integration (repository url: $REPOSITORY)"
                    else
                      echo "No access token found for the Git integration (repository url: $REPOSITORY)"
                      cat /steps/github_token_result.json
                      exit 1
                    fi
                  else
                    echo "Using git Access Token provided"
                  fi

                  GIT_API_ROOT_URL=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.api_root_url'
                  /cd-config/toolchain.json)

                  GIT_OWNER_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.owner_id'
                  /cd-config/toolchain.json)

                  GIT_REPO_NAME=$(jq -r --arg git_repo "$REPOSITORY" '.services[] |
                  select (.parameters.repo_url==$git_repo) | .parameters.repo_name'
                  /cd-config/toolchain.json)

                  GIT_ID=$(jq -r --arg git_repo "$REPOSITORY" '.services[] | select
                  (.parameters.repo_url==$git_repo) | .parameters.git_id'
                  /cd-config/toolchain.json)

                  TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json |
                  awk -F: '{print $3}')

                  echo "GIT_REPOSITORY=$REPOSITORY" >> /steps/next-step-env.properties

                  echo "GIT_AUTH_USER=$GIT_AUTH_USER" >>
                  /steps/next-step-env.properties

                  echo "GIT_TOKEN=$GIT_TOKEN" >> /steps/next-step-env.properties

                  echo "GIT_SERVICE_TYPE=$GIT_SERVICE_TYPE" >>
                  /steps/next-step-env.properties

                  echo "GIT_ID=$GIT_ID" >> /steps/next-step-env.properties

                  echo "GIT_API_ROOT_URL=$GIT_API_ROOT_URL" >>
                  /steps/next-step-env.properties

                  echo "GIT_OWNER_ID=$GIT_OWNER_ID" >> /steps/next-step-env.properties

                  echo "GIT_REPO_NAME=$GIT_REPO_NAME" >>
                  /steps/next-step-env.properties

                  echo "TOOLCHAIN_REGION=$TOOLCHAIN_REGION" >>
                  /steps/next-step-env.properties


                  if [ "$PIPELINE_DEBUG" == "1" ]; then
                    cat /steps/next-step-env.properties
                  fi
              volumeMounts:
                - mountPath: /cd-config
                  name: cd-config-volume
                - mountPath: /steps
                  name: steps-volume
                - mountPath: /scripts
                  name: retry-script
            - name: comment-editor
              image: 'icr.io/continuous-delivery/cra-comm-editor:release.2264'
              imagePullPolicy: Always
              workingDir: /artifacts
              command:
                - /bin/sh
                - '-c'
              args:
                - |
                  #!/bin/sh
                  source /steps/next-step-env.properties

                  if [ -n "$(params.scm-type)" ]; then
                    case "$(params.repository)" in
                      *git.cloud.ibm.com*)
                        if [ "$(params.scm-type)" != "gitlab" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be gitlab"
                          exit 1
                        fi
                        ;;
                      *ibm.com*)
                        if [ "$(params.scm-type)" != "github-ent" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github-ent"
                          exit 1
                        fi
                        ;;
                      *)
                        if [ "$(params.scm-type)" != "github" ]; then
                          echo "Error: Trigger type '$(params.scm-type)' expected to be github"
                          exit 1
                        fi
                        ;;
                    esac
                  fi

                  /usr/local/bin/comm-editor \
                    -repo-url "$(params.repository)" \
                    -pr-url "$(params.pr-url)" \
                    -token "$GIT_TOKEN" \
                    -comment-fp "$COMMENT_FP" \
                    -project-id "$(params.project-id)" \
                    -scm-type "$(params.scm-type)"

                  COMM_RESULT=$?
                  if [ "$COMM_RESULT" != "0" ]; then
                    echo "Error posting comment to pull request"
                    exit 1
                  fi
              volumeMounts:
                - mountPath: /steps
                  name: steps-volume
          workspaces:
            - name: artifacts
              mountPath: /artifacts
            - name: secrets
              mountPath: /secrets
          volumes:
            - name: steps-volume
              emptyDir: {}
            - name: secrets
              secret:
                secretName: $(params.continuous-delivery-context-secret)
            - name: cd-config-volume
              configMap:
                name: toolchain
                items:
                  - key: toolchain.json
                    path: toolchain.json
            - name: retry-script
              configMap:
                name: retry-script
                items:
                  - key: retry.sh
                    path: retry.sh
